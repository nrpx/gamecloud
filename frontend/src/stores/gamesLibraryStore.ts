import { create } from 'zustand'
import { subscribeWithSelector, devtools } from 'zustand/middleware'

// –¢–∏–ø—ã –¥–ª—è –∏–≥—Ä —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
interface GameDownload {
  id: string
  status: 'pending' | 'downloading' | 'completed' | 'paused' | 'error' | 'seeding'
  progress: number
  total_size: number
  downloaded_size: number
}

interface GameWithDownload {
  id: string
  title: string
  genre: string
  description: string
  image_url?: string
  download?: GameDownload
  created_at: string
}

interface GamesLibraryState {
  // –î–∞–Ω–Ω—ã–µ
  games: GameWithDownload[]
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean
  isInitialized: boolean
  error: string | null
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  lastFetched: number | null
  cacheTimeout: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
  
  // –î–µ–π—Å—Ç–≤–∏—è
  fetchGames: () => Promise<void>
  refreshGames: () => Promise<void>
  pauseGameDownload: (gameId: string) => Promise<void>
  resumeGameDownload: (gameId: string) => Promise<void>
  cancelGameDownload: (gameId: string) => Promise<void>
  clearGames: () => void
  setError: (error: string | null) => void
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ API —Ä–æ—É—Ç–∞
async function getAuthToken(): Promise<string | null> {
  try {
    const response = await fetch('/api/token')
    if (!response.ok) {
      throw new Error('Failed to get auth token')
    }
    const data = await response.json()
    return data.token
  } catch (error) {
    console.error('üî¥ [GamesLibraryStore] Error getting auth token:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
async function fetchGamesAPI(): Promise<GameWithDownload[]> {
  const token = await getAuthToken()
  
  if (!token) {
    throw new Error('No authentication token available')
  }
  
  const response = await fetch('/api/v1/library', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  })
  
  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`HTTP ${response.status}: ${errorText}`)
  }

  const data = await response.json()
  
  console.log('üîç [GamesLibraryStore] Raw API response:', data)
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤
  if (!Array.isArray(data)) {
    console.warn('üü° [GamesLibraryStore] API returned non-array data:', data)
    return []
  }
  
  console.log('‚úÖ [GamesLibraryStore] Valid array data received:', data.length, 'items')
  return data
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –∏–≥—Ä
async function gameDownloadActionAPI(downloadId: string, action: 'pause' | 'resume' | 'cancel'): Promise<void> {
  const token = await getAuthToken()
  
  if (!token) {
    throw new Error('No authentication token available')
  }
  
  const response = await fetch(`/api/v1/downloads/${downloadId}/${action}`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  })
  
  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`HTTP ${response.status}: ${errorText}`)
  }
}

// –°–æ–∑–¥–∞–µ–º store —Å middleware –¥–ª—è devtools –∏ subscriptions
export const useGamesLibraryStore = create<GamesLibraryState>()(
  devtools(
    subscribeWithSelector((set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      games: [],
      isLoading: false,
      isInitialized: false,
      error: null,
      lastFetched: null,
      cacheTimeout: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
      
      // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      fetchGames: async () => {
        const state = get()
        const now = Date.now()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if (
          state.games.length > 0 &&
          state.lastFetched !== null &&
          (now - state.lastFetched) < state.cacheTimeout &&
          !state.isLoading
        ) {
          console.log('üéÆ [GamesLibraryStore] Using cached games data')
          return
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if (state.isLoading) {
          console.log('üéÆ [GamesLibraryStore] Games request already in progress, skipping')
          return
        }
        
        try {
          console.log('üéÆ [GamesLibraryStore] Fetching fresh games data...')
          set({ isLoading: true, error: null })
          
          const games = await fetchGamesAPI()
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ games —Ä–∞–≤–Ω–æ null –∏–ª–∏ undefined
          const validGames = Array.isArray(games) ? games : []
          
          set({
            games: validGames,
            isLoading: false,
            isInitialized: true,
            error: null,
            lastFetched: now,
          })
          
          console.log('‚úÖ [GamesLibraryStore] Games loaded successfully:', validGames.length, 'items')
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
          console.error('üî¥ [GamesLibraryStore] Error loading games:', errorMessage)
          
          set({
            isLoading: false,
            error: errorMessage,
            isInitialized: true,
          })
        }
      },
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à)
      refreshGames: async () => {
        console.log('üîÑ [GamesLibraryStore] Force refreshing games...')
        set({ lastFetched: null }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        return get().fetchGames()
      },
      
      // –ü–∞—É–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
      pauseGameDownload: async (gameId: string) => {
        try {
          const game = get().games.find(g => g.id === gameId)
          if (!game?.download) {
            throw new Error('Game download not found')
          }
          
          console.log('‚è∏ [GamesLibraryStore] Pausing game download:', gameId)
          await gameDownloadActionAPI(game.download.id, 'pause')
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
          await get().refreshGames()
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
          console.error('üî¥ [GamesLibraryStore] Error pausing game download:', errorMessage)
          set({ error: errorMessage })
          throw error
        }
      },
      
      // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
      resumeGameDownload: async (gameId: string) => {
        try {
          const game = get().games.find(g => g.id === gameId)
          if (!game?.download) {
            throw new Error('Game download not found')
          }
          
          console.log('‚ñ∂Ô∏è [GamesLibraryStore] Resuming game download:', gameId)
          await gameDownloadActionAPI(game.download.id, 'resume')
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
          await get().refreshGames()
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
          console.error('üî¥ [GamesLibraryStore] Error resuming game download:', errorMessage)
          set({ error: errorMessage })
          throw error
        }
      },
      
      // –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
      cancelGameDownload: async (gameId: string) => {
        try {
          const game = get().games.find(g => g.id === gameId)
          if (!game?.download) {
            throw new Error('Game download not found')
          }
          
          console.log('üóë [GamesLibraryStore] Canceling game download:', gameId)
          await gameDownloadActionAPI(game.download.id, 'cancel')
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
          await get().refreshGames()
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
          console.error('üî¥ [GamesLibraryStore] Error canceling game download:', errorMessage)
          set({ error: errorMessage })
          throw error
        }
      },
      
      // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
      clearGames: () => {
        console.log('üóëÔ∏è [GamesLibraryStore] Clearing games data')
        set({
          games: [],
          isLoading: false,
          isInitialized: false,
          error: null,
          lastFetched: null,
        })
      },
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
      setError: (error: string | null) => {
        set({ error, isLoading: false })
      },
    })),
    {
      name: 'games-library-store', // –ò–º—è –¥–ª—è Redux DevTools
    }
  )
)

// –•—É–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é
export const useGamesLibraryLoading = () => 
  useGamesLibraryStore(state => state.isLoading)

export const useGamesLibraryData = () => 
  useGamesLibraryStore(state => state.games)

export const useGamesLibraryInitialized = () => 
  useGamesLibraryStore(state => state.isInitialized)

export const useGamesLibraryError = () => 
  useGamesLibraryStore(state => state.error)

// –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
export const useFetchGames = () => 
  useGamesLibraryStore(state => state.fetchGames)

export const useRefreshGames = () => 
  useGamesLibraryStore(state => state.refreshGames)

export const usePauseGameDownload = () => 
  useGamesLibraryStore(state => state.pauseGameDownload)

export const useResumeGameDownload = () => 
  useGamesLibraryStore(state => state.resumeGameDownload)

export const useCancelGameDownload = () => 
  useGamesLibraryStore(state => state.cancelGameDownload)

export const useClearGames = () => 
  useGamesLibraryStore(state => state.clearGames)