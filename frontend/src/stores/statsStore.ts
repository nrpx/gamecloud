import { create } from 'zustand'
import { subscribeWithSelector, devtools } from 'zustand/middleware'

// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç backend API
// –¢–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
interface Stats {
  total_games: number
  active_downloads: number
  completed_downloads: number
  total_downloaded_size: number
  total_upload_size: number
}

interface StatsState {
  // –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  stats: Stats | null
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoading: boolean
  isInitialized: boolean
  error: string | null
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  lastFetched: number | null
  cacheTimeout: number // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
  
  // –î–µ–π—Å—Ç–≤–∏—è
  fetchStats: () => Promise<void>
  refreshStats: () => Promise<void>
  clearStats: () => void
  setError: (error: string | null) => void
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ API —Ä–æ—É—Ç–∞
async function getAuthToken(): Promise<string | null> {
  try {
    const response = await fetch('/api/token')
    if (!response.ok) {
      throw new Error('Failed to get auth token')
    }
    const data = await response.json()
    return data.token
  } catch (error) {
    console.error('üî¥ [StatsStore] Error getting auth token:', error)
    return null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function fetchStatsAPI(): Promise<Stats> {
  const token = await getAuthToken()
  
  if (!token) {
    throw new Error('No authentication token available')
  }
  
  const response = await fetch('/api/v1/stats', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  })
  
  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`HTTP ${response.status}: ${errorText}`)
  }
  
  return await response.json()
}

// –°–æ–∑–¥–∞–µ–º store —Å middleware –¥–ª—è devtools –∏ subscriptions
export const useStatsStore = create<StatsState>()(
  devtools(
    subscribeWithSelector((set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      stats: null,
      isLoading: false,
      isInitialized: false,
      error: null,
      lastFetched: null,
      cacheTimeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      
      // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      fetchStats: async () => {
        const state = get()
        const now = Date.now()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –Ω–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        if (
          state.stats !== null &&
          state.lastFetched !== null &&
          (now - state.lastFetched) < state.cacheTimeout &&
          !state.isLoading
        ) {
          console.log('üìà [StatsStore] Using cached stats data')
          return
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if (state.isLoading) {
          console.log('üìà [StatsStore] Stats request already in progress, skipping')
          return
        }
        
        try {
          console.log('üìà [StatsStore] Fetching fresh stats data...')
          set({ isLoading: true, error: null })
          
          const stats = await fetchStatsAPI()
          
          set({
            stats,
            isLoading: false,
            isInitialized: true,
            error: null,
            lastFetched: now,
          })
          
          console.log('‚úÖ [StatsStore] Stats loaded successfully:', stats)
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred'
          console.error('üî¥ [StatsStore] Error loading stats:', errorMessage)
          
          set({
            isLoading: false,
            error: errorMessage,
            // –ù–µ –æ—á–∏—â–∞–µ–º isInitialized, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            isInitialized: true,
          })
        }
      },
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∫—ç—à)
      refreshStats: async () => {
        console.log('üîÑ [StatsStore] Force refreshing stats...')
        set({ lastFetched: null }) // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
        return get().fetchStats()
      },
      
      // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      clearStats: () => {
        console.log('üóëÔ∏è [StatsStore] Clearing stats data')
        set({
          stats: null,
          isLoading: false,
          isInitialized: false,
          error: null,
          lastFetched: null,
        })
      },
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏
      setError: (error: string | null) => {
        set({ error, isLoading: false })
      },
    })),
    {
      name: 'stats-store', // –ò–º—è –¥–ª—è Redux DevTools
    }
  )
)

// –•—É–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
export const useStatsLoading = () => 
  useStatsStore(state => state.isLoading)

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const useStatsData = () => 
  useStatsStore(state => state.stats)

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const useStatsInitialized = () => 
  useStatsStore(state => state.isInitialized)

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏
export const useStatsError = () => 
  useStatsStore(state => state.error)

// –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è - –∏–∑–±–µ–≥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
export const useFetchStats = () => 
  useStatsStore(state => state.fetchStats)

export const useRefreshStats = () => 
  useStatsStore(state => state.refreshStats)

export const useClearStats = () => 
  useStatsStore(state => state.clearStats)

export const useSetStatsError = () => 
  useStatsStore(state => state.setError)