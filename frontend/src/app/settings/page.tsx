'use client'

import { useState } from 'react'
import Link from 'next/link'
import { 
  Box, 
  Flex, 
  Heading, 
  Text, 
  Button, 
  VStack,
  HStack,
  Input,
  Separator
} from '@chakra-ui/react'

export default function SettingsPage() {
  const [settings, setSettings] = useState({
    downloadPath: '/home/user/Downloads/Games',
    maxDownloads: 3,
    uploadLimit: 1000,
    autoStart: true,
    notifications: true,
    theme: 'system',
    language: 'ru'
  })

  const handleSaveSettings = async () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ backend
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settings)
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
  }

  const handleResetSettings = () => {
    setSettings({
      downloadPath: '/home/user/Downloads/Games',
      maxDownloads: 3,
      uploadLimit: 1000,
      autoStart: true,
      notifications: true,
      theme: 'system',
      language: 'ru'
    })
  }

  return (
    <Box minH="100vh" bg="gray.50">
      {/* Header */}
      <Box bg="white" shadow="sm" borderBottom="1px" borderColor="gray.200">
        <Flex maxW="7xl" mx="auto" px={6} py={4} justify="space-between" align="center">
          <HStack gap={4}>
            <Link href="/">
              <Button variant="outline" size="sm">
                ‚Üê –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–π
              </Button>
            </Link>
            <Heading size="lg" color="green.600">
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Heading>
          </HStack>
        </Flex>
      </Box>

      {/* Main Content */}
      <Box maxW="4xl" mx="auto" px={6} py={8}>
        <VStack gap={8} align="stretch">
          {/* Download Settings */}
          <Box p={6} bg="white" borderRadius="lg" shadow="sm">
            <VStack gap={6} align="stretch">
              <Heading size="md" color="green.600">
                üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
              </Heading>

              <VStack align="stretch" gap={2}>
                <Text fontWeight="medium">–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫</Text>
                <Input
                  value={settings.downloadPath}
                  onChange={(e) => setSettings({...settings, downloadPath: e.target.value})}
                  placeholder="/path/to/downloads"
                />
                <Text fontSize="sm" color="gray.500">
                  –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≥–¥–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
                </Text>
              </VStack>

              <VStack align="stretch" gap={2}>
                <Text fontWeight="medium">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫</Text>
                <Input
                  type="number"
                  min="1"
                  max="10"
                  value={settings.maxDownloads}
                  onChange={(e) => setSettings({...settings, maxDownloads: parseInt(e.target.value) || 1})}
                />
              </VStack>

              <VStack align="stretch" gap={2}>
                <Text fontWeight="medium">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–¥–∞—á–∏ (–ö–ë/—Å)</Text>
                <Input
                  type="number"
                  value={settings.uploadLimit}
                  onChange={(e) => setSettings({...settings, uploadLimit: parseInt(e.target.value) || 0})}
                  placeholder="1000"
                />
                <Text fontSize="sm" color="gray.500">
                  0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                </Text>
              </VStack>
            </VStack>
          </Box>

          {/* Application Settings */}
          <Box p={6} bg="white" borderRadius="lg" shadow="sm">
            <VStack gap={6} align="stretch">
              <Heading size="md" color="green.600">
                üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              </Heading>

              <HStack justify="space-between" align="center">
                <VStack align="start" gap={1}>
                  <Text fontWeight="medium">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏</Text>
                  <Text fontSize="sm" color="gray.500">
                    –¢–æ—Ä—Ä–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                  </Text>
                </VStack>
                <input
                  type="checkbox"
                  checked={settings.autoStart}
                  onChange={(e) => setSettings({...settings, autoStart: e.target.checked})}
                  style={{ width: '20px', height: '20px', accentColor: '#38a169' }}
                />
              </HStack>

              <Separator />

              <HStack justify="space-between" align="center">
                <VStack align="start" gap={1}>
                  <Text fontWeight="medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
                  <Text fontSize="sm" color="gray.500">
                    –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
                  </Text>
                </VStack>
                <input
                  type="checkbox"
                  checked={settings.notifications}
                  onChange={(e) => setSettings({...settings, notifications: e.target.checked})}
                  style={{ width: '20px', height: '20px', accentColor: '#38a169' }}
                />
              </HStack>

              <Separator />

              <VStack align="stretch" gap={2}>
                <Text fontWeight="medium">–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</Text>
                <HStack gap={4}>
                  <Button
                    variant={settings.theme === 'system' ? 'solid' : 'outline'}
                    colorScheme={settings.theme === 'system' ? 'green' : 'gray'}
                    size="sm"
                    onClick={() => setSettings({...settings, theme: 'system'})}
                  >
                    –°–∏—Å—Ç–µ–º–Ω–∞—è
                  </Button>
                  <Button
                    variant={settings.theme === 'light' ? 'solid' : 'outline'}
                    colorScheme={settings.theme === 'light' ? 'green' : 'gray'}
                    size="sm"
                    onClick={() => setSettings({...settings, theme: 'light'})}
                  >
                    –°–≤–µ—Ç–ª–∞—è
                  </Button>
                  <Button
                    variant={settings.theme === 'dark' ? 'solid' : 'outline'}
                    colorScheme={settings.theme === 'dark' ? 'green' : 'gray'}
                    size="sm"
                    onClick={() => setSettings({...settings, theme: 'dark'})}
                  >
                    –¢—ë–º–Ω–∞—è
                  </Button>
                </HStack>
              </VStack>

              <VStack align="stretch" gap={2}>
                <Text fontWeight="medium">–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</Text>
                <HStack gap={4}>
                  <Button
                    variant={settings.language === 'ru' ? 'solid' : 'outline'}
                    colorScheme={settings.language === 'ru' ? 'green' : 'gray'}
                    size="sm"
                    onClick={() => setSettings({...settings, language: 'ru'})}
                  >
                    –†—É—Å—Å–∫–∏–π
                  </Button>
                  <Button
                    variant={settings.language === 'en' ? 'solid' : 'outline'}
                    colorScheme={settings.language === 'en' ? 'green' : 'gray'}
                    size="sm"
                    onClick={() => setSettings({...settings, language: 'en'})}
                  >
                    English
                  </Button>
                </HStack>
              </VStack>
            </VStack>
          </Box>

          {/* Action Buttons */}
          <HStack gap={4} justify="end">
            <Button variant="outline" onClick={handleResetSettings}>
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
            <Button colorScheme="green" onClick={handleSaveSettings}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </Button>
          </HStack>
        </VStack>
      </Box>
    </Box>
  )
}
