'use client'

import {
  Box,
  VStack,
  HStack,
  Text,
  Button,
  Input,
  Textarea,
} from '@chakra-ui/react'
import { Icon } from './Icon'
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'

interface EditProfileFormProps {
  onSuccess?: () => void
  onCancel?: () => void
}

export default function EditProfileForm({ onSuccess, onCancel }: EditProfileFormProps) {
  const { data: session, update } = useSession()
  const [displayName, setDisplayName] = useState('')
  const [email, setEmail] = useState('')
  const [bio, setBio] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState(false)

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (session?.user) {
      setDisplayName(session.user.name || '')
      setEmail(session.user.email || '')
      setBio('') // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ bio –≤ —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }, [session])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError(null)

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!displayName.trim()) {
      setError('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      return
    }

    if (!email.trim()) {
      setError('Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      return
    }

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å')
      return
    }

    setIsLoading(true)

    try {
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      // await userApi.updateProfile({ displayName, email, bio })
      
      // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await update({
        ...session,
        user: {
          ...session?.user,
          name: displayName,
          email: email,
        }
      })
      
      setSuccess(true)
      setTimeout(() => {
        onSuccess?.()
        setSuccess(false)
      }, 2000)

    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleCancel = () => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (session?.user) {
      setDisplayName(session.user.name || '')
      setEmail(session.user.email || '')
      setBio('')
    }
    setError(null)
    setSuccess(false)
    onCancel?.()
  }

  return (
    <Box p={4} bg="bg.surface" borderRadius="lg" shadow="sm" border="1px" borderColor="border.muted">
      <VStack gap={4} align="stretch">
        <Text fontSize="lg" fontWeight="bold">
          <Icon name="edit" size={20} style={{ marginRight: '8px', display: 'inline' }} />
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        </Text>

        {error && (
          <Box p={3} bg="red.50" borderRadius="md" border="1px" borderColor="red.200">
            <Text color="red.600" fontSize="sm">
              ‚ùå {error}
            </Text>
          </Box>
        )}

        {success && (
          <Box p={3} bg="green.50" borderRadius="md" border="1px" borderColor="green.200">
            <Text color="green.600" fontSize="sm">
              ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!
            </Text>
          </Box>
        )}

        <form onSubmit={handleSubmit}>
          <VStack gap={4} align="stretch">
            <VStack align="stretch" gap={2}>
              <Text fontWeight="medium">–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</Text>
              <Input
                value={displayName}
                onChange={(e) => setDisplayName(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                disabled={isLoading}
              />
              <Text fontSize="xs" color="fg.muted">
                –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
              </Text>
            </VStack>

            <VStack align="stretch" gap={2}>
              <Text fontWeight="medium">Email –∞–¥—Ä–µ—Å</Text>
              <Input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your.email@example.com"
                disabled={isLoading}
              />
              <Text fontSize="xs" color="fg.muted">
                –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
              </Text>
            </VStack>

            <VStack align="stretch" gap={2}>
              <Text fontWeight="medium">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</Text>
              <Textarea
                value={bio}
                onChange={(e) => setBio(e.target.value)}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                disabled={isLoading}
                rows={3}
              />
              <Text fontSize="xs" color="fg.muted">
                –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
              </Text>
            </VStack>

            <Box p={3} bg="blue.50" borderRadius="md">
              <Text fontSize="sm" color="blue.600">
                üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:
              </Text>
              <Text fontSize="xs" color="blue.600" mt={1}>
                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
              </Text>
            </Box>

            <HStack gap={3} pt={2}>
              <Button
                type="submit"
                colorScheme="green"
                loading={isLoading}
                disabled={isLoading || success}
                flex="1"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
              <Button
                variant="outline"
                onClick={handleCancel}
                disabled={isLoading}
                flex="1"
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
            </HStack>
          </VStack>
        </form>
      </VStack>
    </Box>
  )
}