'use client'

import {
  Box,
  VStack,
  HStack,
  Text,
  Button,
} from '@chakra-ui/react'
import { Icon } from './Icon'
import { useEffect, useMemo } from 'react'
import { useSession } from 'next-auth/react'
import { useForm } from 'react-hook-form'
import { showError, showSuccess } from '@/lib/toast'
import { FormInput, FormTextarea } from '@/components/forms'
import { VALIDATION_RULES } from '@/lib/validation'
import { useFormSync } from '@/hooks/useFormIntegration'

interface ProfileFormData {
  displayName: string
  email: string
  bio: string
}

interface EditProfileFormProps {
  onSuccess?: () => void
  onCancel?: () => void
}

export default function EditProfileForm({ onSuccess, onCancel }: EditProfileFormProps) {
  const { data: session, update } = useSession()
  
  const form = useForm<ProfileFormData>({
    defaultValues: {
      displayName: '',
      email: '',
      bio: '',
    },
    mode: 'onBlur',
  })

  const { handleSubmit, formState: { isSubmitting, isDirty } } = form

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  const syncData = useMemo(() => ({
    displayName: session?.user?.name || '',
    email: session?.user?.email || '',
    bio: '', // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ bio –≤ —Å—Ö–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }), [session?.user?.name, session?.user?.email])

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏
  useFormSync(form, syncData)

  const onSubmit = async (data: ProfileFormData) => {
    try {
      // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      // await userApi.updateProfile(data)
      
      // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      await update({
        ...session,
        user: {
          ...session?.user,
          name: data.displayName,
          email: data.email,
        }
      })
      
      showSuccess('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      setTimeout(() => {
        onSuccess?.()
      }, 2000)

    } catch (err) {
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    }
  }

  const handleCancel = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
    form.reset({
      displayName: session?.user?.name || '',
      email: session?.user?.email || '',
      bio: '',
    })
    onCancel?.()
  }

  return (
    <Box p={4} bg="bg.surface" borderRadius="lg" shadow="sm" border="1px" borderColor="border.muted">
      <VStack gap={4} align="stretch">
        <Text fontSize="lg" fontWeight="bold">
          <Icon name="edit" size={20} style={{ marginRight: '8px', display: 'inline' }} />
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        </Text>

        <form onSubmit={handleSubmit(onSubmit)}>
          <VStack gap={4} align="stretch">
            <FormInput
              name="displayName"
              label="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              helperText="–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
              form={form}
              rules={VALIDATION_RULES.username}
              isDisabled={isSubmitting}
              isRequired
            />

            <FormInput
              name="email"
              label="Email –∞–¥—Ä–µ—Å"
              type="email"
              placeholder="your.email@example.com"
              helperText="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
              form={form}
              rules={VALIDATION_RULES.email}
              isDisabled={isSubmitting}
              isRequired
            />

            <FormTextarea
              name="bio"
              label="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              helperText="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
              form={form}
              rules={VALIDATION_RULES.bio}
              isDisabled={isSubmitting}
              rows={3}
            />

            <Box p={3} bg="blue.50" borderRadius="md">
              <Text fontSize="sm" color="blue.600">
                üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:
              </Text>
              <Text fontSize="xs" color="blue.600" mt={1}>
                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
              </Text>
            </Box>

            <HStack gap={3} pt={2}>
              <Button
                type="submit"
                colorScheme="green"
                loading={isSubmitting}
                disabled={isSubmitting || !isDirty}
                flex="1"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
              <Button
                variant="outline"
                onClick={handleCancel}
                disabled={isSubmitting}
                flex="1"
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
            </HStack>
          </VStack>
        </form>
      </VStack>
    </Box>
  )
}